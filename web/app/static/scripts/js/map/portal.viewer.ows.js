function OWS(options) {
    var _rootElementId = '';
    var _parentId = '';
    var _map = null;

    var _layers = {};

    var  _layerGroup = null;

    var _tmpFeatureExtent = null;

    if (options) {
        _rootElementId = options.rootElementId || '';
        _parentId = options.parentId || '';
        _map = options.map || null;
        _layerGroup = options.layers || null;
    }

    /*----- files ------*/
    var _selectedVectorFile = null;
    /*----- image static ----*/
    var _selectedImageFile = null;

    var _this = this;

    // Generate unique IDs for use as pseudo-private/protected names.
    // Similar in concept to
    // <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
    //
    // The goals of this function are twofold:
    //
    // * Provide a way to generate a string guaranteed to be unique when compared
    //   to other strings generated by this function.
    // * Make the string complex enough that it is highly unlikely to be
    //   accidentally duplicated by hand (this is key if you're using `ID`
    //   as a private/protected name on an object).
    //
    // Use:
    //
    //     var privateName = ID();
    //     var o = { 'public': 'foo' };
    //     o[privateName] = 'bar';
    var _ID = function () {
        // Math.random should be unique because of its seeding algorithm.
        // Convert it to base 36 (numbers + letters), and grab the first 9 characters
        // after the decimal.
        return '_' + Math.random().toString(36).substr(2, 9);
    };

    var _setMap = function (map) {
        _map = map;
    };

    var _textTanslations = {
        ShowServiceMetadata: 'Ver metadados do serviço',
        ServiceUrlInput: 'Indique o Url do serviço',
        ErrorOnService: 'Ocorreu um erro ao aceder ao serviço',
        ErrorOnVectorFile: 'Ocorreu um erro ao processar o ficheiro'
    };

    var _encodeUrl = function (url) {
        var urlParts = url.split("?");

        var newUrl = encodeURIComponent(urlParts[0] + "?" + urlParts[1]);

        return newUrl;
    };

    var _hasOwnPropertyCaseInsensitive = function (obj, property) {
        var props = [];
        for (var i in obj) if (obj.hasOwnProperty(i)) props.push(i);
        var prop;
        while (prop = props.pop()) if (prop.toLowerCase() === property.toLowerCase()) return true;
        return false;
    };

    var getPolygonFromExtent = function (extent) {
        var coords = [
            [parseFloat(extent[0]), parseFloat(extent[3])],
            [parseFloat(extent[2]), parseFloat(extent[3])],
            [parseFloat(extent[2]), parseFloat(extent[1])],
            [parseFloat(extent[0]), parseFloat(extent[1])],
            [parseFloat(extent[0]), parseFloat(extent[3])]
        ];

        var poly = new ol.geom.Polygon(new Array(coords));

        return poly;
    }

    var _getWMSCapabilities = function (url, version) {
        var url = purl(url || $('#owsUrl', _parentId).val());

        var params = {};

        var p = url.param();

        if (!_hasOwnPropertyCaseInsensitive(p, 'service')) {
            params['SERVICE'] = 'WMS';
        }
        if (!_hasOwnPropertyCaseInsensitive(p, 'version')) {
            params['VERSION'] = version || '1.3.0';
        }
        if (!_hasOwnPropertyCaseInsensitive(p, 'request')) {
            params['REQUEST'] = 'GetCapabilities';
        }

        var xhr = OpenLayers.Request.GET({
            url: url.attr('source'),
            params: params,
            /*params: {
                SERVICE: "WMS",
                VERSION: version || "1.3.0",
                REQUEST: "GetCapabilities"
            },*/
            success: function (request) {
                if (_rootElementId) {
                    Portal.Viewer.HideLoading(_rootElementId);
                }

                var doc = request.responseXML;
                if (!doc || !doc.documentElement) {
                    doc = request.responseText;
                }

                var readCapabilities = function (doc, version) {
                    var caps = null;

                    var format = new OpenLayers.Format.WMSCapabilities({
                        version: version,
                        profile: 'INSPIRE',
                        allowFallback: true
                    });

                    try {
                        caps = format.read(doc);
                    } catch (err) { }

                    return caps;
                }

                var capabilities = null;

                capabilities = readCapabilities(doc, version);
                if (capabilities == null && version == '1.3.0') {
                    capabilities = readCapabilities(doc, "1.1.1");
                }

                if (capabilities && capabilities.capability && capabilities.capability.layers) {
                    if (capabilities.capability.inspire && capabilities.capability.inspire.metadataUrl) {
                        var metadata = '<div class="top-margin-10"><a class="pull-right" target="_blank" href="' + capabilities.capability.inspire.metadataUrl.url + '">' + _textTanslations.ShowServiceMetadata + '</a></div>';

                        $("#div-ows-service", _parentId).empty().html(metadata);
                    }

                    var layers = capabilities.capability.layers;
                    for (var i = 0; i < layers.length; i++) {
                        var layer = layers[i];

                        if (layer.nestedLayers == null || layer.nestedLayers.length == 0) {
                            $("#table-ows-results tbody", _parentId).append(_createWMSLayerRecord(capabilities.version, capabilities.capability, layers[i]));
                        }
                    }
                    $('#div-ows-results', _parentId).show();
                } else {
                    $('#div-ows-error .msg-error', _rootElementId || _parentId).html(_textTanslations.ErrorOnService);
                    $('#div-ows-error', _rootElementId || _parentId).show();
                    $('#div-ows-results', _parentId).hide();
                }
            },
            failure: function (error) {
                $('#div-ows-error .msg-error', _rootElementId || _parentId).html(_textTanslations.ErrorOnService);
                $('#div-ows-error', _rootElementId || _parentId).show();

                if (_rootElementId) {
                    Portal.Viewer.HideLoading(_rootElementId);
                }
            }
        });

        if (_rootElementId) {
            Portal.Viewer.ShowLoading(_rootElementId, true, xhr);
        }
    };

    var _getWMTSCapabilities = function (url, version) {
        //var url = $("#owsUrl").val() || 'http://62.48.186.158:8082/geoserver/gwc/service/wmts?REQUEST=GetCapabilities';
        //url = '/proxy?url=' + encodeURIComponent(url);

        var url = purl(url || $('#owsUrl', _parentId).val());

        var params = {};

        var p = url.param();

        if (!_hasOwnPropertyCaseInsensitive(p, 'service')) {
            params['SERVICE'] = 'WMTS';
        }
        if (!_hasOwnPropertyCaseInsensitive(p, 'version')) {
            params['VERSION'] = version || '1.0.0';
        }
        if (!_hasOwnPropertyCaseInsensitive(p, 'request')) {
            params['REQUEST'] = 'GetCapabilities';
        }

        var formatWMTS = new OpenLayers.Format.WMTSCapabilities({
            /**
	         * This particular service is not in compliance with the WMTS spec and
	         * is providing coordinates in y, x order regardless of the CRS.  To
	         * work around this, we can provide the format a table of CRS URN that
	         * should be considered y, x order.  These will extend the defaults on
	         * the format.
	         */
            yx: {
                "urn:ogc:def:crs:EPSG::900913": true
            }
        });

        var xhr = OpenLayers.Request.GET({
            url: url.attr('source'),
            params: params,
            /*url: url,
            params: {
                SERVICE: "WMTS",
                VERSION: version || "1.0.0",
                REQUEST: "GetCapabilities"
            },*/
            success: function (request) {
                var doc = request.responseXML;
                if (!doc || !doc.documentElement) {
                    doc = request.responseText;
                }
                var capabilities = formatWMTS.read(doc);

                if (capabilities.contents && capabilities.contents.layers) {
                    var layers = capabilities.contents.layers;
                    for (var i = 0; i < layers.length; i++) {
                        $('#table-ows-results tbody', _parentId).append(_createWMTSLayerRecord(url.attr('source'), version || "1.0.0", layers[i]));
                    }
                    $('#div-ows-results', _parentId).show();
                } else {
                    $('#div-ows-error .msg-error', _rootElementId || _parentId).html(_textTanslations.ErrorOnService);
                    $('#div-ows-error', _rootElementId || _parentId).show();
                    $('#div-ows-results', _parentId).hide();
                }

                Portal.Viewer.HideLoading('div.sidebar');
            },
            failure: function (error) {
                $('#div-ows-error .msg-error', _rootElementId || _parentId).html(_textTanslations.ErrorOnService);
                $('#div-ows-error', _rootElementId || _parentId).show();

                Portal.Viewer.HideLoading('div.sidebar');
            }
        });

        Portal.Viewer.ShowLoading('div.sidebar', true, xhr);
    };

    var _getWFSCapabilities = function (url, version) {
        //var url = $('#owsUrl', _parentId).val();

        var url = purl(url || $('#owsUrl', _parentId).val());

        var params = {};

        var p = url.param();

        if (!_hasOwnPropertyCaseInsensitive(p, 'service')) {
            params['SERVICE'] = 'WFS';
        }
        if (!_hasOwnPropertyCaseInsensitive(p, 'version')) {
            params['VERSION'] = version || '2.0.0';
        }
        if (!_hasOwnPropertyCaseInsensitive(p, 'request')) {
            params['REQUEST'] = 'GetCapabilities';
        }

        var xhr = OpenLayers.Request.GET({
            url: url.attr('source'),
            params: params,
            /*url: url,
            params: {
                SERVICE: "WFS",
                VERSION: version || "2.0.0",
                REQUEST: "GetCapabilities"
            },*/
            success: function (request) {
                var doc = request.responseXML;
                if (!doc || !doc.documentElement) {
                    doc = request.responseText;
                }

                var readCapabilities = function (doc, version) {
                    var caps = null;

                    var format = new OpenLayers.Format.WFSCapabilities({
                        version: version,
                        profile: 'INSPIRE',
                        allowFallback: true
                    });

                    try {
                        caps = format.read(doc);
                    } catch (err) { }

                    return caps;
                }

                var capabilities = null;

                capabilities = readCapabilities(doc, version);
                if (capabilities == null && version == '2.0.0') {
                    capabilities = readCapabilities(doc, "1.1.0");
                }

                if (capabilities && capabilities.featureTypeList && capabilities.featureTypeList.featureTypes) {
                    if (capabilities.inspire && capabilities.inspire.metadataUrl) {
                        var metadata = '<div class="top-margin-10"><a class="pull-right" target="_blank" href="' + capabilities.inspire.metadataUrl.url + '">' + _textTanslations.ShowServiceMetadata + '</a></div>';

                        $("#div-ows-service", _parentId).empty().html(metadata);
                    }

                    var layers = capabilities.featureTypeList.featureTypes;
                    for (var i = 0; i < layers.length; i++) {
                        var layer = layers[i];

                        $("#table-ows-results tbody", _parentId).append(_createWFSLayerRecord(capabilities.version, capabilities, layers[i]));
                    }

                    $('#div-ows-results', _parentId).show();
                } else {
                    $('#div-ows-error .msg-error', _rootElementId || _parentId).html(_textTanslations.ErrorOnService);
                    $('#div-ows-error', _rootElementId || _parentId).show();
                    $('#div-ows-results', _parentId).hide();
                }

                Portal.Viewer.HideLoading('div.sidebar');
            },
            failure: function (error) {
                $('#div-ows-error .msg-error', _rootElementId || _parentId).html(_textTanslations.ErrorOnService);
                $('#div-ows-error', _rootElementId || _parentId).show();
                $('#div-ows-results', _parentId).hide();

                Portal.Viewer.HideLoading('div.sidebar');
            }
        });

        Portal.Viewer.ShowLoading('div.sidebar', true, xhr);
    };

    function _createWMSLayerRecord(version, capability, layer) {
        var snippet = "<tr><td>";
        var options = "";
        var links = "";

        var supported = false;
        var crs = "";

        var queryable = false;
        var style = '';

        var minScale = '';
        var maxScale = '';

        if (layer.name && layer.name != "") {
            var req = capability.request.getmap.get.href;

            $.each(layer.srs, function (key, value) {
                if (key == "EPSG:3857" || key == Portal.Viewer.getMapProjectionCode()) {
                    supported = true;
                    crs = key;
                    return false;
                }
            });
            if (!supported) {
                $.each(layer.srs, function (key, value) {
                    if (key == "EPSG:900913" || key == "EPSG:3785" || key == "ESRI:102113" || key == "ESRI:102100" || key == "EPSG:102113" || key == "EPSG:102100") {
                        supported = true;
                        crs = key;
                        return false;
                    }
                });
            }
            if (!supported) {
                $.each(layer.srs, function (key, value) {
                    if (key == "EPSG:4326" || key == "CRS:84") {
                        supported = true;
                        crs = key;
                        return false;
                    }
                });
            }

            queryable = layer.queryable || false;

            if (layer.styles && layer.styles.length > 0) {
				style = layer.styles[0].name;

				if (style && style.toLowerCase() == 'inspire_common:default') {
					style = 'default';
				}
            }

            if (layer.minScale) {
                minScale = layer.minScale;
            }
            if (layer.maxScale) {
                maxScale = layer.maxScale;
            }

            if (supported) {
                var id = _ID();
                _layers[id] = layer;

                links += '<span class="btn btn-primary btn-sm add-layer pull-right" data-service-type="wms" data-service-version="' + version + '" data-url="' + req + '" data-layer-id="' + id + '" data-layer-name="' + layer.name + '" data-layer-title="' + layer.title + '" data-layer-crs="' + crs + '" data-layer-queryable="' + (layer.queryable || false) + '" data-layer-style="' + style + '" data-layer-min-scale="' + minScale + '" data-layer-max-scale="' + maxScale + '">' + 'Adicionar' + '</span>';
            } else {
                links += '<div class="alert alert-danger" style="position: inherit; left: 0px;right: 0px;">' + 'Sistema de Coordenadas não suportado' + '</div>';
            }
        }


        var extent = '';
        if (layer.llbbox && layer.llbbox.length > 0) {
            extent = layer.llbbox.join(",");
        }

        var title = '<a class="a-record" title="' + layer.title + '" href="#" data-extent-bbox="' + extent + '">' + layer.title + '</a>';
        snippet += title;
        snippet += '<div class="abstract muted">' + (layer.abstract || '') + '</div>';
        snippet += options;
        snippet += links;

        /* Criar a combo para selecção do style
        snippet += _createWMSLayerRecordStyle(layer);
        */

        snippet += '</td></tr>';

        return snippet;
    };

    function _createWMSLayerRecordStyle(layer) {
        var html = '<div>';
        html += '<select class="layer-style form-control">';
        html += '<option value="">Default</option>';
        if (layer && layer.styles) {
            for (var i = 0; i < layer.styles.length; i++) {
                var style = layer.styles[0];
                html += '<option value="' + style.name + '" data-legend-url="' + style.legend.href + '">' + style.title + '</option>';
            }
        }
        return html;
    }

    function _createWMTSLayerRecord(url, version, layer) {
        var snippet = "<tr><td>";
        var options = "";
        var links = "";

        if (layer.identifier && layer.identifier != "") {
            var req = url;

            links += '<span class="btn btn-primary add-layer pull-right" data-service-type="wmts" data-service-version="' + version + '" data-url="' + req + '" data-layer-name="' + layer.identifier + '" data-layer-title="' + layer.title + '">' + 'Adicionar' + '</span>';
        }

        var tilematrixsets = '<select id="tileMatrixSets">';
        for (var i = 0; i < layer.tileMatrixSetLinks.length; i++) {
            var matrix = layer.tileMatrixSetLinks[i].tileMatrixSet;
            tilematrixsets = tilematrixsets + '<option value="' + matrix + '">' + matrix + '</option>';
        }
        tilematrixsets = tilematrixsets + '</select>';

        var title = '<a class="a-record" title="' + layer.title + '" href="#">' + layer.title + '</a>';
        snippet += title;
        snippet += '<p>' + (layer.abstract || '') + '</p>';
        snippet += tilematrixsets;
        snippet += options;
        snippet += links;
        snippet += '</td></tr>';

        return snippet;
    }

    function _createWFSLayerRecord(version, capability, layer) {
        var snippet = "<tr><td>";
        var options = "";
        var links = "";

        if (layer.name && layer.name != "") {

            var req = capability.operationsMetadata.GetFeature.dcp.http.get[0].url;

            var crs = layer.srs;

            links += '<span class="btn btn-primary btn-sm add-layer pull-right" data-service-type="wfs" data-service-version="' + version + '" data-url="' + req + '" data-layer-name="' + layer.name + '" data-layer-title="' + layer.title + '" data-layer-crs="' + crs + '" data-layer-queryable="true">' + 'Adicionar' + '</span>';
        }

        var extent = '';
        if (layer.bounds && layer.bounds.left) {
            extent = layer.bounds.left + ',' + layer.bounds.bottom + ',' + layer.bounds.right + ',' + layer.bounds.top;
        }

        //var title = '<a class="a-record" title="' + layer.title + '" href="#" data-extent-bbox="' + extent + '">' + layer.title + '</a>';
        var title = '<a class="a-record" title="' + layer.title + '" href="#" data-extent-bbox="' + extent + '">' + layer.title + '</a>';
        snippet += title;
        snippet += '<p class="muted">' + (layer.abstract || '') + '</p>';
        snippet += options;
        snippet += links;
        snippet += '</td></tr>';

        return snippet;
    };

    function _getCapabilities(url, version, type) {

        $('#table-ows-results tbody', _parentId).empty();
        $('#div-ows-results', _parentId).hide();
        $('#div-ows-error', _rootElementId || _parentId).hide();

        _layer = {};

        if (type.toLowerCase() == 'wfs') {
            _getWFSCapabilities(url, version);
        } else if (type.toLowerCase() == 'wmts') {
            _getWMTSCapabilities(url, version);
        } else {
            _getWMSCapabilities(url, version);
        }
    }


    var _addWMSLayer = function(url, map, layers, format, transparent, title, crs, tiled, version, styles, sld, group, name, queryable, addToMap, extent, target_layer, minScale, maxScale) {

        var m = _map || map;
        var l;

        var projection = ol.proj.get(crs);

        var params = {};
        params.LAYERS = layers;
        if (sld && sld != '') {
            params.SLD = sld;
        } else {
            params.STYLES = styles || '';
        }
        //params.PROJECTION = crs;
        params.VERSION = version;

        var new_url = url;
        if (url.match("\\?$")) {
            new_url = url.slice(0, -1);
        }

        if (tiled) {
            params.TILED = true;

            l = new ol.layer.Tile({
                source: new ol.source.TileWMS(/** @type {olx.source.TileWMSOptions} */({
                    url: new_url,
                    projection: crs,
                    //crossOrigin :'anonymous',
                    //params: {'LAYERS': layers, 'STYLES': styles || '','VERSION': version, 'TILED': true}
                    params: params,
                    tileLoadFunction: function(image, src) {
                        if (window.location.protocol === 'https:' && $.url(src).attr('protocol') == 'http') {
                            image.getImage().src = OpenLayers.ProxyHost + _encodeUrl(src);
                        } else {
                            image.getImage().src = src;
                        }
                       /*
                       var params = new URLSearchParams(src.slice(src.indexOf('?')));
                       console.log('bounds', params.get('BBOX'));
                       */
                    }
                })),
                name: name || '',
                title: title,
                group: group || '',
                extent_layer: extent,
                queryable: queryable || false
            });
        } else {
            l = new ol.layer.Image({
                source: new ol.source.ImageWMS({
                    url: new_url,
                    projection: crs,
                    //crossOrigin: 'anonymous',
                    //params: {'LAYERS': layers, 'STYLES': styles || '', 'VERSION': version }
                    params: params,
                    imageLoadFunction: function(image, src) {
                        if (window.location.protocol === 'https:' && $.url(src).attr('protocol') == 'http') {
                            image.getImage().src = OpenLayers.ProxyHost + _encodeUrl(src);
                        } else {
                            image.getImage().src = src;
                        }
                       /*
                       var params = new URLSearchParams(src.slice(src.indexOf('?')));
                       console.log('bounds', params.get('BBOX'));
                       */
                    }
                }),
                name: name || '',
                title: title,
                group: group || '',
                extent_layer: extent,
                queryable: queryable || false
            })
        }

        if (addToMap == null || addToMap) {
            m.addLayer(l);
        }

        return l;
    };

    //var _addWMTSLayer = function (url, map, id, layers, tilematrixset, format, transparent, attribution, version) {
    var _addWMTSLayer = function (url, map, layer, tilematrixset, format, transparent, title, version) {
        var m = _map || map;

        var projection = ol.proj.get('EPSG:3857');
        var projectionExtent = projection.getExtent();

        var size = ol.extent.getWidth(projectionExtent) / 256;
        var resolutions = new Array(14);
        var matrixIds = new Array(14);
        for (var z = 0; z < 14; ++z) {
            // generate resolutions and matrixIds arrays for this WMTS
            resolutions[z] = size / Math.pow(2, z);
            matrixIds[z] = z;
        }

        var attribution = new ol.Attribution({
            html: 'Tiles &copy; <a href="http://services.arcgisonline.com/arcgis/rest/' +
                'services/Demographics/USA_Population_Density/MapServer/">ArcGIS</a>'
        });

        var l = new ol.layer.Tile({
            opacity: 0.7,
            extent: projectionExtent,
            source: new ol.source.WMTS({
                attributions: [attribution],
                //url: 'http://62.48.186.158:8082/geoserver/gwc/service/wmts',
                url: url,
                layer: layer,
                matrixSet: tilematrixset, //'EPSG:3857',
                format: format,
                projection: projection,
                tileGrid: new ol.tilegrid.WMTS({
                    origin: ol.extent.getTopLeft(projectionExtent),
                    resolutions: resolutions,
                    matrixIds: matrixIds
                }),
                style: 'default',
                title: title
            })
        });

        m.addLayer(l);
    };

    var _addWFSLayer = function (url, map, typename, title, version, group, name, maxFeatures, selectable, highlight, addToMap, extent) {

        var m = _map || map;

        /*
        service=WFS
        version=1.0.0
        request=GetFeature
        typeName=lousada:patrimonio
        maxFeatures=50
        outputFormat=application/json
        srsname=EPSG:3857
        */

        var request = 'GetFeature'
        var service= 'WFS';
        var format = 'application/JSON';
        var srs = _map.getView().getProjection().getCode();

        var new_url = url;
        if (url.match("\\?$")) {
            new_url = url.slice(0, -1);
        }
        var wfsurl = new_url + '?service=' + service + '&request=' + request + '&version=' + version + '&typename=' + typename + '&outputFormat=' + format +
            '&srsname=' + srs;

        if (maxFeatures) {
            wfsurl = wfsurl + '&maxFeatures=' + maxFeatures;
        }

        var l = new ol.layer.Vector({
            source: new ol.source.Vector({
                url: OpenLayers.ProxyHost + _encodeUrl(wfsurl),
                format: new ol.format.GeoJSON()
            }),
            name: name || '',
            title: title,
            group: group || '',
            extent_layer: extent,
            selectable: selectable || false,
            highlight: highlight ||false
        });

        return l;
    };


    var _addVectorFeaturesLayer = function (data, map, title, group, name, selectable, highlight, addToMap, extent) {

        var m = _map || map;
        var ext = extent;

        var crs = $('#fileCRS').val();

        if (crs) {
            data['crs'] = {
                'type': 'name',
                'properties': {
                  'name': crs
                }
            }
        }

        var vectorSource = new ol.source.Vector({
              features: (new ol.format.GeoJSON({
              defaultDataProjection: crs || 'EPSG:4326'
            })).readFeatures(data, {
              dataProjection: crs || 'EPSG:4326',
              featureProjection: m.getView().getProjection()
            })
        });

        if (!ext) {
            ext = {
                bounds: vectorSource.getExtent(),
                projection: m.getView().getProjection().getCode()
            }
        }

        var vectorLayer = new ol.layer.Vector({
          source: vectorSource,
            name: name || '',
            title: title,
            group: group || '',
            extent_layer: ext,
            selectable: selectable || false,
            highlight: highlight ||false
        });

        return vectorLayer;
    };

    var _addImageStaticLayer = function (img_url, img_crs, img_extent, map, title, group, name, addToMap, extent) {
        var m = _map || map;
        var ext = extent;

        var imageSource = new ol.source.ImageStatic({
            url: img_url,
            crossOrigin: '',
            projection: ol.proj.get(img_crs),
            imageExtent: img_extent
        });

        if (!ext) {
            ext = {
                bounds:  ol.proj.transformExtent(img_extent, img_crs, m.getView().getProjection().getCode()),
                projection: m.getView().getProjection().getCode()
            }
        }

        var imageLayer = new ol.layer.Image({
            source: imageSource,
            name: name || '',
            title: title,
            group: group || '',
            extent_layer: ext
        });

        return imageLayer;
    };



    /*--------- files --------*/
    function resetFormVectorFiles() {
        // reset selected vector file
        _selectedVectorFile = null;

        $('#formFiles', _parentId).val('');
        $('#fileTitle', _parentId).val('');

        $('.add-vectorfile-processing', _parentId).hide();
        $('#vectorfile-error', _parentId).html('');
        $('.add-vectorfile-error', _parentId).hide();
        $('#vectorfile-metadata', _parentId).html('');
        $('.add-vectorfile-step2', _parentId).hide();
    }
    /*------------- end files ---------------*/

    /*--------- image static --------*/
    function resetFormImageFiles() {
        // reset selected vector file
        _selectedImageFile = null;

        $('#formImages', _parentId).val('');
        $('#imageTitle', _parentId).val('');

        $('#imageMinX', _parentId).val('');
        $('#imageMinY', _parentId).val('');
        $('#imageMaxX', _parentId).val('');
        $('#imageMaxY', _parentId).val('');

        $('.add-imagefile-processing', _parentId).hide();
        $('#imagefile-error', _parentId).html('');
        $('.add-imagefile-error', _parentId).hide();
        $('#imagefile-metadata', _parentId).html('');
        $('.add-imagefile-step2', _parentId).hide();
    }
    /*------------- end files ---------------*/



    $('#serviceType', _parentId).change(function (e) {
        var tipo = $(this).val();

        $('#serviceVersion option', _parentId).hide().removeAttr("selected");;
        $('#serviceVersion option[data-tipo="' + tipo + '"]', _parentId).show();

        $('#serviceVersion option[data-tipo="' + tipo + '"]:first', _parentId).attr('selected', 'selected');
    }).trigger('change');

    $('#serviceList', _parentId).on("click", "li", function (event) {
        if ($('a', this).data('url')) {
            var url = $('a', this).data('url');
            $('#owsUrl', _parentId).val(url);

            if ($('a', this).data('version')) {
                var version = $('a', this).data('version');
                $('#serviceVersion', _parentId).val(version);
            } else {
                $('#serviceVersion', _parentId).val('1.3.0');
            }

            if ($('a', this).data('ignore-service-url')) {
                var ignore = $('a', this).data('ignore-service-url');
                $('#ignorarUrlServico', _parentId).prop('checked', ignore);
            } else {
                $('#ignorarUrlServico', _parentId).prop('checked', false);
            }

            if ($('a', this).data('tiled')) {
                var tiled = $('a', this).data('tiled');
                $('#tiled', _parentId).prop('checked', tiled);
            } else {
                $('#tiled', _parentId).prop('checked', true);
            }

            $('#table-ows-results tbody', _parentId).empty();
            $('#div-ows-results', _parentId).hide();
            $('#div-ows-error', _rootElementId || _parentId).hide();
        }
    });

    $('#btnOWS', _parentId).on("click", function (e) {

        var type = $('#serviceType', _parentId).val();
        var version = $('#serviceVersion', _parentId).val();

        $('#table-ows-results tbody', _parentId).empty();
        $('#div-ows-results', _parentId).hide();
        $('#div-ows-error', _rootElementId || _parentId).hide();

        if ($('#owsUrl', _parentId).val() == '') {
            $('#div-ows-error .msg-error', _parentId).html(_textTanslations.ServiceUrlInput);
            $('#div-ows-error', _rootElementId || _parentId).show();
        } else {
            if (type.toLowerCase() == 'wfs') {
                _getWFSCapabilities(null, version);
            } else if (type.toLowerCase() == 'wmts') {
                _getWMTSCapabilities(null, version);
            } else {
                _getWMSCapabilities(null, version);
            }
        }
    });

    $('#btnFilterLayers', _parentId).click(function (e) {
        var filter = $('#txtLayersFilter', _parentId).val();

        if (filter && filter != "") {
            $('#table-ows-results tr', _parentId).hide();
            $("#table-ows-results tr a:icontains('" + filter + "')", _parentId).closest('tr').show();
        } else {
            $('tr', '#table-ows-results', _parentId).show();
        }
    });

    $('#btnClearFilter', _parentId).click(function () {
        $('#txtLayersFilter', _parentId).val('');
        $('#table-ows-results tr', _parentId).show();
    });

    $('#table-ows-results', _parentId).on('click', '.a-record', function (event) {
        var extentBBox = $(this).data('extent-bbox');
        var extentSRS = 'EPSG:4326';

        if (extentBBox && extentBBox != '') {
            var extent = extentBBox.split(',');
            var poly = getPolygonFromExtent(extent);

            var geom = poly.transform(extentSRS, _map.getView().getProjection().getCode());
            _map.getView().fit(geom.getExtent(), _map.getSize());
        }
    }).on('mouseenter', '.a-record', function (event) {
        var l = Portal.Viewer.getTemporaryLayer();

        if ($(this).attr('data-extent-bbox') != undefined && $(this).attr('data-extent-bbox') != '') {
            var mapSrid = Portal.Viewer.getMapProjectionCode();

            var geom = Portal.Viewer.getPolygonFromExtent($(this).attr('data-extent-bbox'),',').transform('EPSG:4326', Portal.Viewer.getMapProjectionCode());
            var feature = new ol.Feature({
                geometry: geom,
                fid: $(this).attr('fid'),
                modulo: 'metadados'
            });

            l.getSource().addFeature(feature);

            _tmpFeatureExtent = feature;
        } else {
            _tmpFeatureExtent = null;
        }
    }).on('mouseleave', '.a-record', function (event) {
        if (_tmpFeatureExtent) {
            var l = Portal.Viewer.getTemporaryLayer();
            l.getSource().removeFeature(_tmpFeatureExtent);
        }
    });

    $('#table-ows-results', _parentId).on('click', '.add-layer', function (event) {

        var id = $(this).attr('data-layer-id');

        var url = $(this).attr('data-url');
        var version = $(this).attr('data-service-version');
        var layer_name = $(this).attr('data-layer-name');
        var layer_title = $(this).attr('data-layer-title');
        var layer_crs = $(this).attr('data-layer-crs');
        var layer_queryable = $(this).attr('data-layer-queryable') || false;

        var layer_style = $(this).attr('data-layer-style');
        layer_style = $(this).parent().find('select.layer-style').val() || '';

        var layer_min_scale = $(this).attr('data-layer-min-scale') || null;
        var layer_max_scale = $(this).attr('data-layer-max-scale') || null;

        var service_type = $(this).attr('data-service-type');

        var tiled = $("#tiled", _parentId).is(':checked');

        if ($("#ignorarUrlServico", _parentId).is(':checked')) {
            url = $("#owsUrl", _parentId).val();
        }

        var layer_extent = null;
        if ($('a.a-record', $(this).parent()) && $('a.a-record', $(this).parent()).length > 0) {
            var el = $('a.a-record', $(this).parent())[0];

            var extentBBox = $(el).data('extent-bbox');
            var extentSRS = 'EPSG:4326';

            if (extentBBox && extentBBox != '') {
                layer_extent = {
                    bounds: extentBBox.split(','),
                    projection: extentSRS
                };
            }
        }

        if (service_type == 'wms') {
            var wms = _addWMSLayer(url, _map, layer_name, 'image/png', true, layer_title, layer_crs, tiled, version, layer_style,
                        null, null, null, layer_queryable, false, layer_extent, null, layer_min_scale, layer_max_scale);

            //var options = {
            //    url: url,
            //    map: _map,
            //    layer: layer_name,
            //    imageFormat: 'image/png',
            //    transparent: true,
            //    title: layer_title,
            //    crs: layer_crs,
            //    tiled: tiled,
            //    version: version,
            //    style: layer_style,
            //    sld: '',
            //    group: '',
            //    name: '',
            //    addToMap: false,

            //    queryable: layer_queryable,
            //    capability:  _layers[id]
            //}
            //var wms = _addWMSLayer(options);

            if (wms) {
                wms.set('queryable', layer_queryable);
                wms.set('capability', _layers[id]);

                if (_layerGroup) {
                    //_layerGroup.insertAt(0, wms);
                    _layerGroup.push(wms);
                } else {
                    _map.addLayer(wms);
                }

                if (layer_extent) {
                    var poly = getPolygonFromExtent(layer_extent.bounds);
                    var geom = poly.transform(layer_extent.projection, _map.getView().getProjection().getCode());
                    _map.getView().fit(geom.getExtent(), _map.getSize());
                }
            }
        } else if (service_type == 'wmts') {
            var tilematrixset = $('option:selected', $(this).prev('select')).val() || 'EPSG:900913';

            var wmts = _addWMTSLayer(url, _map, layer_name, tilematrixset, 'image/png', true, layer_title, version);
        } else if (service_type == 'wfs') {
            var wfs = _addWFSLayer(url, _map, layer_name, layer_title, version, null, null, null, null, null, false, layer_extent);
            //(url, map, typename, title, version, group, name, selectable, highlight, addToMap, extent)

            if (wfs) {
                wfs.set('selectable', layer_queryable);
                wfs.set('highlight', false);
                wfs.set('capability', _layers[id]);

                if (_layerGroup) {
                    _layerGroup.push(wfs);
                } else {
                    _map.addLayer(wfs);
                }

                if (layer_extent) {
                    var poly = getPolygonFromExtent(layer_extent.bounds);
                    var geom = poly.transform(layer_extent.projection, _map.getView().getProjection().getCode());
                    _map.getView().fit(geom.getExtent(), _map.getSize());
                }
            }
        }
    });


    /*------------------------------------------------------------------------------------------*/

    $('#fileFormat', _parentId).on('change', function (e) {
        resetFormVectorFiles();
        $('#formFiles', _parentId).get(0).reset();
        $('#features-file-import', _parentId).attr('accept', $(this).val());
    });
    $('.btn-import', _parentId).on('click', function(e) {
        $('#formFiles', _parentId).get(0).reset();
        $('#features-file-import', _parentId).attr('accept', $('#fileFormat', _parentId).val());
        $("#features-file-import", _parentId).trigger('click');
    });
    $('#features-file-import', _parentId).on("change", function (event) {
        if (this.files.length > 0) {
            resetFormVectorFiles();

            $('.add-vectorfile-processing', _parentId).show();

            var formdata = new FormData();
            formdata.append("files[]", this.files[0]);

            $.ajax({
                url: $('#formFiles', _parentId).attr('action'),
                type: "POST",
                data: formdata,
                processData: false,
                contentType: false, // this is important!!!
                success: function (res) {
                    if(res.Success === true){
                        _selectedVectorFile = res.Data;

                        $('#formFiles', _parentId).val('');

                        $('#fileTitle', _parentId).val(res.Data.metadata.filename);

                        $('.add-vectorfile-processing', _parentId).hide();
                        $(".add-vectorfile-step2", _parentId).show();

                        var html = '<ul style="list-style-type: none; padding-left: 5px;">';
                        html += '<li><strong>Ficheiro:</strong> ' + res.Data.metadata.filename  + '</li>';
                        html += '<li><strong>Driver:</strong> ' + res.Data.metadata.driver  + '</li>';
                        html += '<li><strong>Registos:</strong> ' + (res.Data.data.features ? res.Data.data.features.length : '')  + '</li>';
                        /*html += '<li>CRS: ' + (crs ? crs : res.Data.metadata.crs)  + '</li>';*/
                        html += '<li><strong>Extensão:</strong> ' + (res.Data.metadata.extent  ? res.Data.metadata.extent.map(function(elem){return Math.round(elem);}).join(', ') : '')  + '</li>';
                        html += '</ul>';
                        $('#vectorfile-metadata', _parentId).html(html);
                    } else {
                        $('.add-vectorfile-processing', _parentId).hide();
                        $('.add-vectorfile-error', _parentId).show();
                        $('#vectorfile-error', _parentId).html(res.Message || _textTanslations.ErrorOnVectorFile);
                    }
                },
                error: function (error) {
                    $('.add-vectorfile-processing', _parentId).hide();
                    $('.add-vectorfile-error', _parentId).show();
                    $('#vectorfile-error', _parentId).html(_textTanslations.ErrorOnVectorFile);
                }
            });
        }
    });

    $('#btn_add_vector_file', _parentId).on("click", function (event) {
        if (_selectedVectorFile && _selectedVectorFile.data) {
            var file_title = $('#fileTitle', _parentId).val() || _selectedVectorFile.metadata.filename;
            var l = _addVectorFeaturesLayer(_selectedVectorFile.data, _map, file_title, null, _selectedVectorFile.metadata.filename, true, true, false, null);

            if (_layerGroup) {
                //_layerGroup.insertAt(0, wms);
                _layerGroup.push(l);
            } else {
                _map.addLayer(l);
            }
            _map.getView().fit(l.getSource().getExtent(), _map.getSize());
        }
    });
    $('#btn_cancel_vector_file', _parentId).on("click", function (event) {
        $('#formFiles', _parentId).get(0).reset();
        resetFormVectorFiles();
    });

    /*------------------------------------------------------------------------------------------*/
    $('#imageFormat', _parentId).on('change', function (e) {});
    $('.btn-import-image', _parentId).on('click', function(e) {
        $('#formImages', _parentId).get(0).reset();
        $('#image-file-import', _parentId).attr('accept', $('#imageFormat', _parentId).val());
        $("#image-file-import", _parentId).trigger('click');
    });
    $('#image-file-import', _parentId).on("change", function (event) {
        if (this.files.length > 0) {
            resetFormImageFiles();

            $('.add-imagefile-processing', _parentId).show();

            var formdata = new FormData();

            for (var i=0; i < this.files.length; i++) {
                formdata.append("files[]", this.files[i]);
            }

            $.ajax({
                url: $('#formImages', _parentId).attr('action'),
                type: "POST",
                data: formdata,
                processData: false,
                contentType: false, // this is important!!!
                success: function (res) {
                    if(res.Success === true){
                        _selectedImageFile = res.Data;

                        $('#formImages', _parentId).val('');

                        $('#imageMinX', _parentId).val(_selectedImageFile.metadata.minx);
                        $('#imageMinY', _parentId).val(_selectedImageFile.metadata.miny);
                        $('#imageMaxX', _parentId).val(_selectedImageFile.metadata.maxx);
                        $('#imageMaxY', _parentId).val(_selectedImageFile.metadata.maxy);

                        $('#imageTitle', _parentId).val(res.Data.metadata.filename);

                        $('.add-imagefile-processing', _parentId).hide();
                        $(".add-imagefile-step2", _parentId).show();

                        var html = '<ul style="list-style-type: none; padding-left: 5px;">';
                        html += '<li><strong>Ficheiro:</strong> ' + res.Data.metadata.filename  + '</li>';
                        html += '<li><strong>Dimensão (pixels):</strong> ' + res.Data.metadata.width + ' x ' + res.Data.metadata.height + '</li>';
                        //html += '<li><strong>Registos:</strong> ' + (res.Data.data.features ? res.Data.data.features.length : '')  + '</li>';
                        //html += '<li><strong>Extensão:</strong> ' + (res.Data.metadata.extent  ? res.Data.metadata.extent.map(function(elem){return Math.round(elem);}).join(', ') : '')  + '</li>';
                        html += '</ul>';
                        $('#imagefile-metadata', _parentId).html(html);
                    } else {
                        $('.add-imagefile-processing', _parentId).hide();
                        $('.add-imagefile-error', _parentId).show();
                        $('#imagefile-error', _parentId).html(res.Message || _textTanslations.ErrorOnVectorFile);
                    }
                },
                error: function (error) {
                    $('.add-imagefile-processing', _parentId).hide();
                    $('.add-imagefile-error', _parentId).show();
                    $('#imagefile-error', _parentId).html(_textTanslations.ErrorOnVectorFile);
                }
            });
        }
    });

    $('#btn_add_image_file', _parentId).on("click", function (event) {
        if (_selectedImageFile && _selectedImageFile.metadata) {
            var img_url = _selectedImageFile.metadata.url;
            var img_title = $('#imageTitle', _parentId).val() || _selectedImageFile.metadata.filename;
            var img_crs = $('#imageCRS').val();
            var img_minx = $('#imageMinX', _parentId).val() || _selectedImageFile.metadata.minx;
            var img_miny = $('#imageMinY', _parentId).val() || _selectedImageFile.metadata.miny;
            var img_maxx = $('#imageMaxX', _parentId).val() || _selectedImageFile.metadata.maxx;
            var img_maxy = $('#imageMaxY', _parentId).val() || _selectedImageFile.metadata.maxy;
            var l = _addImageStaticLayer(img_url, img_crs, [parseFloat(img_minx), parseFloat(img_miny), parseFloat(img_maxx), parseFloat(img_maxy)], _map, img_title, null, _selectedImageFile.metadata.filename, false, null);

            if (_layerGroup) {
                //_layerGroup.insertAt(0, wms);
                _layerGroup.push(l);
            } else {
                _map.addLayer(l);
            }
            if (l.get('extent_layer')) {
                _map.getView().fit(l.get('extent_layer').bounds, _map.getSize());
            }
        }
    });
    $('#btn_cancel_image_file', _parentId).on("click", function (event) {
        $('#formImages', _parentId).get(0).reset();
        resetFormImageFiles();
    });


    return {
        setMap: _setMap,
        getCapabilities: _getCapabilities,
        addWMSLayer: _addWMSLayer,
        addWMTSLayer: _addWMTSLayer,
        addWFSLayer: _addWFSLayer,
        addVectorFeaturesLayer: _addVectorFeaturesLayer,
        addImageStaticLayer: _addImageStaticLayer
    }

};